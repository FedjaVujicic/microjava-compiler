package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, BREAK, CLASS, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE, FOR, STATIC, NAMESPACE;
terminal PLUS, MINUS, MUL, DIV, MOD, EQUAL, NOT_EQUAL, GREATER, GREATER_EQUAL, LESSER, LESSER_EQUAL, AND, OR, ASSIGN, INC, DEC;
terminal SEMICOLON, COLON, COMMA, DOT, LPAREN, RPAREN, LSQUARE, RSQUARE, LBRACE, RBRACE, WTF, REFERENCE;
terminal IDENT;
terminal NUM_CONST;
terminal CHAR_CONST;
terminal BOOL_CONST;

nonterminal Program, NamespaceList, NamespaceDecl, DeclList, IdentDecl, ConstDecl, Type, ConstVars, ConstVar, Value, VarDecl, Vars, Var;
nonterminal MethodDeclList, MethodDecl, RetVal, FormParsOpt, FormParsList, FormPar, VarDeclList;
nonterminal StatementList, Statement, Condition, CondTerm, CondFact, Expr, Relop, Term, Addop, Factor, Mulop, ActPars, Designator, DesignatorStatement, Assignop;

precedence left ELSE;


Program ::= PROGRAM IDENT NamespaceList DeclList LBRACE MethodDeclList RBRACE;

NamespaceList ::= NamespaceList NamespaceDecl
				|
				;
				
NamespaceDecl ::= NAMESPACE IDENT LBRACE DeclList LBRACE MethodDeclList RBRACE RBRACE;

DeclList ::= DeclList IdentDecl
			|
			;

IdentDecl ::= ConstDecl
			| 
			VarDecl
			;
			
ConstDecl ::= CONST Type ConstVars SEMICOLON;

Type ::= IDENT
		|
		IDENT REFERENCE IDENT
		;
		
ConstVars ::= ConstVar
			| 
			ConstVars COMMA ConstVar
			;
		
ConstVar ::= IDENT ASSIGN Value;

Value ::= NUM_CONST
		| 
		CHAR_CONST
		| 
		BOOL_CONST
		;
		
VarDecl ::= Type Vars SEMICOLON;

Vars ::= Var
		|
		Vars COMMA Var
		;
		
Var ::= IDENT
		|
		IDENT LSQUARE RSQUARE
		;
		
MethodDeclList ::= MethodDeclList MethodDecl
				|
				;
								
MethodDecl ::= RetVal IDENT LPAREN FormParsOpt RPAREN VarDeclList LBRACE StatementList RBRACE;

RetVal ::= Type
		|
		VOID
		;

FormParsOpt ::= FormParsList
			|
			;
			
FormParsList ::= FormPar
			|
			FormParsList COMMA FormPar
			;
			
FormPar ::= Type IDENT
			|
			Type IDENT LSQUARE RSQUARE
			;

VarDeclList ::= VarDeclList VarDecl
				|
				;

StatementList ::= StatementList Statement
				|
				;

Statement ::= DesignatorStatement SEMICOLON
			| 
			IF LPAREN Condition RPAREN Statement
			| 
			IF LPAREN Condition RPAREN Statement ELSE Statement
			| 
			BREAK SEMICOLON
			| 
			CONTINUE SEMICOLON
			| 
			RETURN SEMICOLON
			| 
			RETURN Expr SEMICOLON
			| 
			READ LPAREN Designator RPAREN SEMICOLON
			| 
			PRINT LPAREN Expr RPAREN SEMICOLON
			| 
			PRINT LPAREN Expr COMMA NUM_CONST RPAREN SEMICOLON
			| 
			LBRACE StatementList RBRACE
			;				

Condition ::= CondTerm
			| 
			Condition OR CondTerm
			;
			
CondTerm ::= CondFact
			| 
			CondTerm AND CondFact
			;

CondFact ::= Expr
			| 
			Expr Relop Expr
			;
			
Expr ::= Term
		| 
		MINUS Term
		| 
		Expr Addop Term
		; 

Term ::= Factor
		| 
		Term Mulop Factor
		;
		
Factor ::= Designator
		| 
		Designator LPAREN RPAREN
		| 
		Designator LPAREN ActPars RPAREN
		| 
		NUM_CONST
		| 
		CHAR_CONST
		| 
		BOOL_CONST
		| 
		NEW Type LSQUARE Expr RSQUARE
		| 
		NEW Type LPAREN ActPars RPAREN
		| 
		LPAREN Expr RPAREN
		;	
		
Mulop ::= MUL
		| 
		DIV
		| 
		MOD
		;
		
Designator ::= IDENT
			| 
			IDENT REFERENCE IDENT
			| 
			Designator DOT IDENT
			| 
			Designator LSQUARE Expr RSQUARE
			;

ActPars ::= Expr
			| 
			ActPars COMMA Expr
			;

Addop ::= PLUS
		| 
		MINUS
		;

Relop ::= EQUAL
		| 
		NOT_EQUAL
		| 
		GREATER
		| 
		GREATER_EQUAL
		| 
		LESSER
		| 
		LESSER_EQUAL
		;
		
DesignatorStatement ::= Designator Assignop Expr
						| 
						Designator LPAREN RPAREN
						| 
						Designator LPAREN ActPars RPAREN
						| 
						Designator INC
						| 
						Designator DEC
						;

Assignop ::= ASSIGN;
